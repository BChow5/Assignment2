#!/bin/bash

if [[ $EUID -ne 0 ]]; then
  echo "Error: Please run as a root user or using sudo"
  exit 1
fi
# checks if script is being run with sudo or as root user. exit if not.

if [ $# -eq 0 ]; then
    echo "Error: No options or arguments provided. You need to at least provide a username using -u"
    exit 1
fi
# checks if script is given no arguments or options 

# Sets default values if no inputs are given
user=""
shell="/bin/bash"
new_user=0
base_uid=1000
group_add=""

user_exists() { 
    if grep -q "^$user:" /etc/passwd; then
      # checks if the username given as a argument exists in the /etc/passwd file
        echo "Error: That user already exists"
        exit 3 # Exit because user already exists
    fi
}

check_uid() {
  while [[ $new_user -eq 0 ]]; do
    if grep -q ":$base_uid:" /etc/passwd || grep -q ":$base_uid:" /etc/group; then
      # checks if base_uid is already used in /etc/passwd or if a group is already using the desired ID
      base_uid=$(( base_uid + 1 ))
      # if the uid is already used then add 1 to the uid and try again to check
    else
      base_gid=$base_uid 
      # makes the group id match the user id if it isn't being used yet
      new_user=1
      # sets new_user to 1 to exit out of the loop after we save the variable base_gid
    fi
    # checks in /etc/passwd if the UID already exists in the file
    # if UID already exists, then increment UID by 1 and check again
    # if there is no matching UID, then change new_user to 1 to exit the while loop
    # source: https://man.archlinux.org/man/grep.1
  done
}

add_user() {
  home_dir="/home/$user"
  echo "$user:x:$base_uid:$base_gid:$user:$home_dir:$shell" >> /etc/passwd
  # >> appends the new user information into the /etc/passwd file
  # source: https://stackoverflow.com/questions/7859281/how-to-add-user-with-out-using-useradd-or-similar-command
  echo "$user:x:$base_gid:$user" >> /etc/group
  # >> appends a new group with the same name as the username and saving that to the /etc/group file 
}

make_directory() {
  mkdir /home/$user
  # creates the home directory of the new user
  cp -r /etc/skel /home/$user
  # recursively copy the files from /etc/skel to the home directory of the user
  # source: https://superuser.com/questions/61611/how-to-copy-with-cp-to-include-hidden-files-and-hidden-directories-and-their-con
  # source: https://man.archlinux.org/man/cp.1
  chown -R "$user" "$home_dir"
  # recursively changing ownership of the home directory to the new user created 
}




add_group() {

  for group in ${group_add[@]}; do 
    if ! grep -q $group /etc/group; then
      # checks that the desired group name actually exists already
      echo "Error: This group does not exist"
      exit 3
    fi

    group_line=$(grep "^$group:" /etc/group)
    # finds the group in the /etc/group file and saves the text line to variable
    if [[ $group_line =~ :$ ]]; then
      # checks if the last character is a : using a regex to check if there are any users already in the group
      # source: https://stackoverflow.com/questions/21425006/how-to-check-if-the-last-string-character-equals-in-bash
      modified_group="${group_line}${user}"
      # adds the user to the end of the line
    else
      modified_group="${group_line},${user}"
      # adds user to the end of the line but adds a comma if a user is already in the group
      # creates a modified new line adding the new user to the group
    fi
    sed -i "s|$group_line|$modified_group|" /etc/group
    # sed replaces the old text saved in $group_line with the new text saved in $modified_group
    # the s tells sed to replace text within the specified pattern
    # -i means to modify the file in place. making changes directly to the file
    # source: https://askubuntu.com/questions/20414/find-and-replace-text-within-a-file-using-commands
    # source: https://man.archlinux.org/man/sed.1
  done
}


while getopts ":g:s:u:" opt; do
  case "${opt}" in
    u)
      user=${OPTARG}
      # sets the user variable based on the argument given
      ;;
    s)
      if grep -q -x ${OPTARG} /etc/shells; then
        # checks if the shell provided is a valid shell in the /etc/shells file
        shell=${OPTARG}
      else
        echo "Error: That is not a valid shell"
        exit 2
      fi
      # saves the desired shell to the shell variable based on user argument
      ;;

    g) 
      read -a group_add <<< ${OPTARG}
      # gets a string of the groups from the argument to add the user to and save it to an array called group_add
      # splits it into an array based on spaces and assigns each group to group_add array.
      # <<< takes the string from the OPTARG on the right side and passes it as standard input to the read
      # https://man.archlinux.org/man/read.ni
      ;;
    :)
      if [[ "${OPTARG}" == "u" ]]; then  
        echo "Error: -${OPTARG} requires a custom user name"
        exit 2
      elif [[ "${OPTARG}" == "s" ]]; then
        echo "Error: -${OPTARG} requires a custom shell"
        exit 2
      elif [[ "${OPTARG}" == "g" ]]; then
        echo "Error: -${OPTARG} requires at least one group to add the user to"
        exit 2
      fi
      # errors for when a user puts an option but has no argument with it when it needs one
      ;;
    *)
      echo "Error: Please enter a valid option"
      exit 2

      # error for when a user give an option other than -s , -g, or -u
  esac
done

# MAIN PART OF THE CODE TO CREATE USER

if [[ -z $user ]]; then
  echo "Error: No username was provided with -u. Please provide a username"
  exit 1
fi 
# checks that the script was given a -u with a username arguement. required to run the script


user_exists
check_uid
echo "Creating the user $user with UID $base_uid..."
add_user
echo "Creating the home directory..."
make_directory

if [[ -n $group_add ]]; then
  # checks if any groups to add the user to was given
  add_group
  echo "Adding the new user to the specified groups..."
fi


passwd $user
# creates the password for the user 
if [[ $? -eq 0 ]]; then
  # checks the exit code of the password command. echo a completion or failure message based on if exit code is 0 or something else
  echo "User creation is complete!"
  exit 0
else
  echo "Error: The user was created but password has not been properly set for the user. Please use \"passwd $user\" to set the password manually"
  exit 3
fi

